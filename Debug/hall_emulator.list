
hall_emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027e4  080027e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002808  08002808  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002808  08002808  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002808  08002808  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000002c  0800283c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  0800283c  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b4b  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000173c  00000000  00000000  00028ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  0002ac90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016a79  00000000  00000000  0002b568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000846f  00000000  00000000  00041fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083b3e  00000000  00000000  0004a450  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cdf8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026fc  00000000  00000000  000ce00c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027cc 	.word	0x080027cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	080027cc 	.word	0x080027cc

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2a      	ldr	r3, [pc, #168]	; (800020c <MX_GPIO_Init+0xc0>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a29      	ldr	r2, [pc, #164]	; (800020c <MX_GPIO_Init+0xc0>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b27      	ldr	r3, [pc, #156]	; (800020c <MX_GPIO_Init+0xc0>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b24      	ldr	r3, [pc, #144]	; (800020c <MX_GPIO_Init+0xc0>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a23      	ldr	r2, [pc, #140]	; (800020c <MX_GPIO_Init+0xc0>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b21      	ldr	r3, [pc, #132]	; (800020c <MX_GPIO_Init+0xc0>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b1e      	ldr	r3, [pc, #120]	; (800020c <MX_GPIO_Init+0xc0>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1d      	ldr	r2, [pc, #116]	; (800020c <MX_GPIO_Init+0xc0>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1b      	ldr	r3, [pc, #108]	; (800020c <MX_GPIO_Init+0xc0>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b18      	ldr	r3, [pc, #96]	; (800020c <MX_GPIO_Init+0xc0>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a17      	ldr	r2, [pc, #92]	; (800020c <MX_GPIO_Init+0xc0>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b15      	ldr	r3, [pc, #84]	; (800020c <MX_GPIO_Init+0xc0>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HA_Pin|HB_Pin|HC_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80001c6:	4812      	ldr	r0, [pc, #72]	; (8000210 <MX_GPIO_Init+0xc4>)
 80001c8:	f000 ff80 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001cc:	2301      	movs	r3, #1
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d0:	2300      	movs	r3, #0
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001d4:	2301      	movs	r3, #1
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	480d      	ldr	r0, [pc, #52]	; (8000214 <MX_GPIO_Init+0xc8>)
 80001e0:	f000 fe1a 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HA_Pin|HB_Pin|HC_Pin;
 80001e4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ea:	2301      	movs	r3, #1
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	4619      	mov	r1, r3
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <MX_GPIO_Init+0xc4>)
 80001fe:	f000 fe0b 	bl	8000e18 <HAL_GPIO_Init>

}
 8000202:	bf00      	nop
 8000204:	3720      	adds	r7, #32
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40021000 	.word	0x40021000
 8000210:	40010c00 	.word	0x40010c00
 8000214:	40010800 	.word	0x40010800

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fc6a 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f82a 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f7ff ff92 	bl	800014c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 fa88 	bl	800073c <MX_TIM1_Init>
  MX_TIM2_Init();
 800022c:	f000 fb28 	bl	8000880 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	main_init();
 8000230:	f000 f8ec 	bl	800040c <main_init>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (cnt_10us == 0)
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <main+0x54>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d1fb      	bne.n	8000234 <main+0x1c>
		{
			cnt_10us = 10000; // 0.1sec  // hall period update time
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <main+0x54>)
 800023e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000242:	601a      	str	r2, [r3, #0]
			while (cnt_hall_period != 0) // update hall period at counter == 0
 8000244:	bf00      	nop
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <main+0x58>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d1fb      	bne.n	8000246 <main+0x2e>
			{

			}

			if (hall_period > 498)
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <main+0x5c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8000256:	d9ed      	bls.n	8000234 <main+0x1c>
				Hall_Period_Init(hall_period -= 300);
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <main+0x5c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <main+0x5c>)
 8000262:	6013      	str	r3, [r2, #0]
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f895 	bl	8000394 <Hall_Period_Init>
		if (cnt_10us == 0)
 800026a:	e7e3      	b.n	8000234 <main+0x1c>
 800026c:	2000004c 	.word	0x2000004c
 8000270:	20000048 	.word	0x20000048
 8000274:	20000050 	.word	0x20000050

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	; 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fa98 	bl	80027bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029a:	2301      	movs	r3, #1
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ac:	2302      	movs	r3, #2
 80002ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 0318 	add.w	r3, r7, #24
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 ff1b 	bl	80010fc <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002cc:	f000 f819 	bl	8000302 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	2302      	movs	r3, #2
 80002d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 f986 	bl	80015fc <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002f6:	f000 f804 	bl	8000302 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	; 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000306:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000308:	e7fe      	b.n	8000308 <Error_Handler+0x6>
	...

0800030c <SetOutput>:
{ HB_GPIO_Port, HB_Pin },
{ HC_GPIO_Port, HC_Pin },
{ B1_GPIO_Port, B1_Pin }, };

void SetOutput(uint8_t ch, uint8_t hl)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]

	if (hl == 0)
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d10a      	bne.n	8000338 <SetOutput+0x2c>
	{
		gpio_map[ch].port->BRR = (uint32_t) gpio_map[ch].pin;
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	79fa      	ldrb	r2, [r7, #7]
 8000326:	490c      	ldr	r1, [pc, #48]	; (8000358 <SetOutput+0x4c>)
 8000328:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800032c:	490a      	ldr	r1, [pc, #40]	; (8000358 <SetOutput+0x4c>)
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	440b      	add	r3, r1
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	6153      	str	r3, [r2, #20]
	}
	else
	{
		gpio_map[ch].port->BSRR = (uint32_t) gpio_map[ch].pin;
	}
}
 8000336:	e009      	b.n	800034c <SetOutput+0x40>
		gpio_map[ch].port->BSRR = (uint32_t) gpio_map[ch].pin;
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	79fa      	ldrb	r2, [r7, #7]
 800033c:	4906      	ldr	r1, [pc, #24]	; (8000358 <SetOutput+0x4c>)
 800033e:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8000342:	4905      	ldr	r1, [pc, #20]	; (8000358 <SetOutput+0x4c>)
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	440b      	add	r3, r1
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	6113      	str	r3, [r2, #16]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000000 	.word	0x20000000

0800035c <GetInput>:

uint8_t GetInput(uint8_t ch)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
	return ((gpio_map[ch].port)->IDR & (gpio_map[ch].pin)) == 0 ? 0 : 1;
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	4a09      	ldr	r2, [pc, #36]	; (8000390 <GetInput+0x34>)
 800036a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800036e:	689a      	ldr	r2, [r3, #8]
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	4907      	ldr	r1, [pc, #28]	; (8000390 <GetInput+0x34>)
 8000374:	00db      	lsls	r3, r3, #3
 8000376:	440b      	add	r3, r1
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	4013      	ands	r3, r2
 800037c:	2b00      	cmp	r3, #0
 800037e:	bf14      	ite	ne
 8000380:	2301      	movne	r3, #1
 8000382:	2300      	moveq	r3, #0
 8000384:	b2db      	uxtb	r3, r3
}
 8000386:	4618      	mov	r0, r3
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	20000000 	.word	0x20000000

08000394 <Hall_Period_Init>:
/*
 set hall_period variable
 period取6的倍數, 週期= period x 10us, 498=>200Hz, 996 => 100Hz
 */
void Hall_Period_Init(uint32_t period)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	hall_period = period;
 800039c:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <Hall_Period_Init+0x5c>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6013      	str	r3, [r2, #0]
	hall_60d = hall_period / 6;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <Hall_Period_Init+0x5c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a13      	ldr	r2, [pc, #76]	; (80003f4 <Hall_Period_Init+0x60>)
 80003a8:	fba2 2303 	umull	r2, r3, r2, r3
 80003ac:	089b      	lsrs	r3, r3, #2
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <Hall_Period_Init+0x64>)
 80003b0:	6013      	str	r3, [r2, #0]
	hall_120d = hall_period / 3;
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <Hall_Period_Init+0x5c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <Hall_Period_Init+0x60>)
 80003b8:	fba2 2303 	umull	r2, r3, r2, r3
 80003bc:	085b      	lsrs	r3, r3, #1
 80003be:	4a0f      	ldr	r2, [pc, #60]	; (80003fc <Hall_Period_Init+0x68>)
 80003c0:	6013      	str	r3, [r2, #0]
	hall_180d = hall_period / 2;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <Hall_Period_Init+0x5c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	085b      	lsrs	r3, r3, #1
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <Hall_Period_Init+0x6c>)
 80003ca:	6013      	str	r3, [r2, #0]
	hall_240d = hall_120d << 1;
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <Hall_Period_Init+0x68>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <Hall_Period_Init+0x70>)
 80003d4:	6013      	str	r3, [r2, #0]
	hall_300d = hall_180d + hall_120d;
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <Hall_Period_Init+0x6c>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <Hall_Period_Init+0x68>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4413      	add	r3, r2
 80003e0:	4a09      	ldr	r2, [pc, #36]	; (8000408 <Hall_Period_Init+0x74>)
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000050 	.word	0x20000050
 80003f4:	aaaaaaab 	.word	0xaaaaaaab
 80003f8:	20000054 	.word	0x20000054
 80003fc:	20000058 	.word	0x20000058
 8000400:	2000005c 	.word	0x2000005c
 8000404:	20000060 	.word	0x20000060
 8000408:	20000064 	.word	0x20000064

0800040c <main_init>:

void main_init()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	hall_state = S5;  // initial state = S5
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <main_init+0x60>)
 8000412:	2205      	movs	r2, #5
 8000414:	701a      	strb	r2, [r3, #0]
	cnt_10us = 100000; // 1sec for low frequency
 8000416:	4b16      	ldr	r3, [pc, #88]	; (8000470 <main_init+0x64>)
 8000418:	4a16      	ldr	r2, [pc, #88]	; (8000474 <main_init+0x68>)
 800041a:	601a      	str	r2, [r3, #0]
	Hall_Period_Init(9960); // set hall at low frequency 10Hz
 800041c:	f242 60e8 	movw	r0, #9960	; 0x26e8
 8000420:	f7ff ffb8 	bl	8000394 <Hall_Period_Init>

	////// wait for user button pushed
	while (1)
	{
		if (GetInput(3) == 0)
 8000424:	2003      	movs	r0, #3
 8000426:	f7ff ff99 	bl	800035c <GetInput>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1f9      	bne.n	8000424 <main_init+0x18>
		{
			HAL_Delay(100); // debounce
 8000430:	2064      	movs	r0, #100	; 0x64
 8000432:	f000 fbc1 	bl	8000bb8 <HAL_Delay>
			if (GetInput(3) == 0)
 8000436:	2003      	movs	r0, #3
 8000438:	f7ff ff90 	bl	800035c <GetInput>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d000      	beq.n	8000444 <main_init+0x38>
		if (GetInput(3) == 0)
 8000442:	e7ef      	b.n	8000424 <main_init+0x18>
			{
				break;
 8000444:	bf00      	nop
			}
		}
	}

	////// enable timer
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <main_init+0x6c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	68da      	ldr	r2, [r3, #12]
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <main_init+0x6c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f042 0201 	orr.w	r2, r2, #1
 8000454:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000456:	2100      	movs	r1, #0
 8000458:	4807      	ldr	r0, [pc, #28]	; (8000478 <main_init+0x6c>)
 800045a:	f001 fae1 	bl	8001a20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800045e:	2100      	movs	r1, #0
 8000460:	4806      	ldr	r0, [pc, #24]	; (800047c <main_init+0x70>)
 8000462:	f001 fadd 	bl	8001a20 <HAL_TIM_PWM_Start>
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000068 	.word	0x20000068
 8000470:	2000004c 	.word	0x2000004c
 8000474:	000186a0 	.word	0x000186a0
 8000478:	2000006c 	.word	0x2000006c
 800047c:	200000b4 	.word	0x200000b4

08000480 <timer_period_elasped_callback>:

// update event
//put this code into HAL_TIM_PeriodElapsedCallback
void timer_period_elasped_callback(TIM_HandleTypeDef *htim)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	if (cnt_10us > 0)
 8000488:	4b68      	ldr	r3, [pc, #416]	; (800062c <timer_period_elasped_callback+0x1ac>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d004      	beq.n	800049a <timer_period_elasped_callback+0x1a>
		cnt_10us--;
 8000490:	4b66      	ldr	r3, [pc, #408]	; (800062c <timer_period_elasped_callback+0x1ac>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	3b01      	subs	r3, #1
 8000496:	4a65      	ldr	r2, [pc, #404]	; (800062c <timer_period_elasped_callback+0x1ac>)
 8000498:	6013      	str	r3, [r2, #0]

	if (++cnt_hall_period >= hall_period)
 800049a:	4b65      	ldr	r3, [pc, #404]	; (8000630 <timer_period_elasped_callback+0x1b0>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3301      	adds	r3, #1
 80004a0:	4a63      	ldr	r2, [pc, #396]	; (8000630 <timer_period_elasped_callback+0x1b0>)
 80004a2:	6013      	str	r3, [r2, #0]
 80004a4:	4a63      	ldr	r2, [pc, #396]	; (8000634 <timer_period_elasped_callback+0x1b4>)
 80004a6:	6812      	ldr	r2, [r2, #0]
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d302      	bcc.n	80004b2 <timer_period_elasped_callback+0x32>
		cnt_hall_period = 0;
 80004ac:	4b60      	ldr	r3, [pc, #384]	; (8000630 <timer_period_elasped_callback+0x1b0>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]

	switch (hall_state)
 80004b2:	4b61      	ldr	r3, [pc, #388]	; (8000638 <timer_period_elasped_callback+0x1b8>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b05      	cmp	r3, #5
 80004b8:	f200 809b 	bhi.w	80005f2 <timer_period_elasped_callback+0x172>
 80004bc:	a201      	add	r2, pc, #4	; (adr r2, 80004c4 <timer_period_elasped_callback+0x44>)
 80004be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c2:	bf00      	nop
 80004c4:	080004dd 	.word	0x080004dd
 80004c8:	0800050d 	.word	0x0800050d
 80004cc:	0800053b 	.word	0x0800053b
 80004d0:	08000569 	.word	0x08000569
 80004d4:	08000597 	.word	0x08000597
 80004d8:	080005c5 	.word	0x080005c5
	{
	case S0:
		if (cnt_hall_period == (hall_60d - 1))
 80004dc:	4b57      	ldr	r3, [pc, #348]	; (800063c <timer_period_elasped_callback+0x1bc>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	1e5a      	subs	r2, r3, #1
 80004e2:	4b53      	ldr	r3, [pc, #332]	; (8000630 <timer_period_elasped_callback+0x1b0>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f040 8090 	bne.w	800060c <timer_period_elasped_callback+0x18c>
		{
			SetOutput(0, 1);
 80004ec:	2101      	movs	r1, #1
 80004ee:	2000      	movs	r0, #0
 80004f0:	f7ff ff0c 	bl	800030c <SetOutput>
			SetOutput(1, 0);
 80004f4:	2100      	movs	r1, #0
 80004f6:	2001      	movs	r0, #1
 80004f8:	f7ff ff08 	bl	800030c <SetOutput>
			SetOutput(2, 0);
 80004fc:	2100      	movs	r1, #0
 80004fe:	2002      	movs	r0, #2
 8000500:	f7ff ff04 	bl	800030c <SetOutput>
			hall_state = S1;
 8000504:	4b4c      	ldr	r3, [pc, #304]	; (8000638 <timer_period_elasped_callback+0x1b8>)
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
		}
		break;
 800050a:	e07f      	b.n	800060c <timer_period_elasped_callback+0x18c>
	case S1:
		if (cnt_hall_period == (hall_120d - 1))
 800050c:	4b4c      	ldr	r3, [pc, #304]	; (8000640 <timer_period_elasped_callback+0x1c0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	1e5a      	subs	r2, r3, #1
 8000512:	4b47      	ldr	r3, [pc, #284]	; (8000630 <timer_period_elasped_callback+0x1b0>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	429a      	cmp	r2, r3
 8000518:	d17a      	bne.n	8000610 <timer_period_elasped_callback+0x190>
		{
			SetOutput(0, 1);
 800051a:	2101      	movs	r1, #1
 800051c:	2000      	movs	r0, #0
 800051e:	f7ff fef5 	bl	800030c <SetOutput>
			SetOutput(1, 1);
 8000522:	2101      	movs	r1, #1
 8000524:	2001      	movs	r0, #1
 8000526:	f7ff fef1 	bl	800030c <SetOutput>
			SetOutput(2, 0);
 800052a:	2100      	movs	r1, #0
 800052c:	2002      	movs	r0, #2
 800052e:	f7ff feed 	bl	800030c <SetOutput>
			hall_state = S2;
 8000532:	4b41      	ldr	r3, [pc, #260]	; (8000638 <timer_period_elasped_callback+0x1b8>)
 8000534:	2202      	movs	r2, #2
 8000536:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000538:	e06a      	b.n	8000610 <timer_period_elasped_callback+0x190>
	case S2:
		if (cnt_hall_period == (hall_180d - 1))
 800053a:	4b42      	ldr	r3, [pc, #264]	; (8000644 <timer_period_elasped_callback+0x1c4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1e5a      	subs	r2, r3, #1
 8000540:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <timer_period_elasped_callback+0x1b0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	429a      	cmp	r2, r3
 8000546:	d165      	bne.n	8000614 <timer_period_elasped_callback+0x194>
		{
			SetOutput(0, 0);
 8000548:	2100      	movs	r1, #0
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff fede 	bl	800030c <SetOutput>
			SetOutput(1, 1);
 8000550:	2101      	movs	r1, #1
 8000552:	2001      	movs	r0, #1
 8000554:	f7ff feda 	bl	800030c <SetOutput>
			SetOutput(2, 0);
 8000558:	2100      	movs	r1, #0
 800055a:	2002      	movs	r0, #2
 800055c:	f7ff fed6 	bl	800030c <SetOutput>
			hall_state = S3;
 8000560:	4b35      	ldr	r3, [pc, #212]	; (8000638 <timer_period_elasped_callback+0x1b8>)
 8000562:	2203      	movs	r2, #3
 8000564:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000566:	e055      	b.n	8000614 <timer_period_elasped_callback+0x194>
	case S3:
		if (cnt_hall_period == (hall_240d - 1))
 8000568:	4b37      	ldr	r3, [pc, #220]	; (8000648 <timer_period_elasped_callback+0x1c8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	1e5a      	subs	r2, r3, #1
 800056e:	4b30      	ldr	r3, [pc, #192]	; (8000630 <timer_period_elasped_callback+0x1b0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	429a      	cmp	r2, r3
 8000574:	d150      	bne.n	8000618 <timer_period_elasped_callback+0x198>
		{
			SetOutput(0, 0);
 8000576:	2100      	movs	r1, #0
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff fec7 	bl	800030c <SetOutput>
			SetOutput(1, 1);
 800057e:	2101      	movs	r1, #1
 8000580:	2001      	movs	r0, #1
 8000582:	f7ff fec3 	bl	800030c <SetOutput>
			SetOutput(2, 1);
 8000586:	2101      	movs	r1, #1
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff febf 	bl	800030c <SetOutput>
			hall_state = S4;
 800058e:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <timer_period_elasped_callback+0x1b8>)
 8000590:	2204      	movs	r2, #4
 8000592:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000594:	e040      	b.n	8000618 <timer_period_elasped_callback+0x198>
	case S4:
		if (cnt_hall_period == (hall_300d - 1))
 8000596:	4b2d      	ldr	r3, [pc, #180]	; (800064c <timer_period_elasped_callback+0x1cc>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	1e5a      	subs	r2, r3, #1
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <timer_period_elasped_callback+0x1b0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d13b      	bne.n	800061c <timer_period_elasped_callback+0x19c>
		{
			SetOutput(0, 0);
 80005a4:	2100      	movs	r1, #0
 80005a6:	2000      	movs	r0, #0
 80005a8:	f7ff feb0 	bl	800030c <SetOutput>
			SetOutput(1, 0);
 80005ac:	2100      	movs	r1, #0
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff feac 	bl	800030c <SetOutput>
			SetOutput(2, 1);
 80005b4:	2101      	movs	r1, #1
 80005b6:	2002      	movs	r0, #2
 80005b8:	f7ff fea8 	bl	800030c <SetOutput>
			hall_state = S5;
 80005bc:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <timer_period_elasped_callback+0x1b8>)
 80005be:	2205      	movs	r2, #5
 80005c0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005c2:	e02b      	b.n	800061c <timer_period_elasped_callback+0x19c>
	case S5:
		if (cnt_hall_period == (hall_period - 1))
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <timer_period_elasped_callback+0x1b4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	1e5a      	subs	r2, r3, #1
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <timer_period_elasped_callback+0x1b0>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d126      	bne.n	8000620 <timer_period_elasped_callback+0x1a0>
		{
			SetOutput(0, 1);
 80005d2:	2101      	movs	r1, #1
 80005d4:	2000      	movs	r0, #0
 80005d6:	f7ff fe99 	bl	800030c <SetOutput>
			SetOutput(1, 0);
 80005da:	2100      	movs	r1, #0
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff fe95 	bl	800030c <SetOutput>
			SetOutput(2, 1);
 80005e2:	2101      	movs	r1, #1
 80005e4:	2002      	movs	r0, #2
 80005e6:	f7ff fe91 	bl	800030c <SetOutput>
			hall_state = S0;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <timer_period_elasped_callback+0x1b8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005f0:	e016      	b.n	8000620 <timer_period_elasped_callback+0x1a0>
	default:
		SetOutput(0, 0);
 80005f2:	2100      	movs	r1, #0
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff fe89 	bl	800030c <SetOutput>
		SetOutput(1, 0);
 80005fa:	2100      	movs	r1, #0
 80005fc:	2001      	movs	r0, #1
 80005fe:	f7ff fe85 	bl	800030c <SetOutput>
		SetOutput(2, 0);
 8000602:	2100      	movs	r1, #0
 8000604:	2002      	movs	r0, #2
 8000606:	f7ff fe81 	bl	800030c <SetOutput>
		break;
 800060a:	e00a      	b.n	8000622 <timer_period_elasped_callback+0x1a2>
		break;
 800060c:	bf00      	nop
 800060e:	e008      	b.n	8000622 <timer_period_elasped_callback+0x1a2>
		break;
 8000610:	bf00      	nop
 8000612:	e006      	b.n	8000622 <timer_period_elasped_callback+0x1a2>
		break;
 8000614:	bf00      	nop
 8000616:	e004      	b.n	8000622 <timer_period_elasped_callback+0x1a2>
		break;
 8000618:	bf00      	nop
 800061a:	e002      	b.n	8000622 <timer_period_elasped_callback+0x1a2>
		break;
 800061c:	bf00      	nop
 800061e:	e000      	b.n	8000622 <timer_period_elasped_callback+0x1a2>
		break;
 8000620:	bf00      	nop
	}
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000004c 	.word	0x2000004c
 8000630:	20000048 	.word	0x20000048
 8000634:	20000050 	.word	0x20000050
 8000638:	20000068 	.word	0x20000068
 800063c:	20000054 	.word	0x20000054
 8000640:	20000058 	.word	0x20000058
 8000644:	2000005c 	.word	0x2000005c
 8000648:	20000060 	.word	0x20000060
 800064c:	20000064 	.word	0x20000064

08000650 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	timer_period_elasped_callback(htim);
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff11 	bl	8000480 <timer_period_elasped_callback>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_MspInit+0x5c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_MspInit+0x5c>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <HAL_MspInit+0x5c>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_MspInit+0x5c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_MspInit+0x60>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <HAL_MspInit+0x60>)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000712:	f000 fa35 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <TIM1_UP_IRQHandler+0x10>)
 8000722:	f001 fa1f 	bl	8001b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000006c 	.word	0x2000006c

08000730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b096      	sub	sp, #88	; 0x58
 8000740:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
 800076a:	615a      	str	r2, [r3, #20]
 800076c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2220      	movs	r2, #32
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f002 f821 	bl	80027bc <memset>

  htim1.Instance = TIM1;
 800077a:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <MX_TIM1_Init+0x13c>)
 800077c:	4a3f      	ldr	r2, [pc, #252]	; (800087c <MX_TIM1_Init+0x140>)
 800077e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000780:	4b3d      	ldr	r3, [pc, #244]	; (8000878 <MX_TIM1_Init+0x13c>)
 8000782:	2200      	movs	r2, #0
 8000784:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <MX_TIM1_Init+0x13c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 719;
 800078c:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <MX_TIM1_Init+0x13c>)
 800078e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000792:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000794:	4b38      	ldr	r3, [pc, #224]	; (8000878 <MX_TIM1_Init+0x13c>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800079a:	4b37      	ldr	r3, [pc, #220]	; (8000878 <MX_TIM1_Init+0x13c>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007a0:	4b35      	ldr	r3, [pc, #212]	; (8000878 <MX_TIM1_Init+0x13c>)
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007a6:	4834      	ldr	r0, [pc, #208]	; (8000878 <MX_TIM1_Init+0x13c>)
 80007a8:	f001 f892 	bl	80018d0 <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007b2:	f7ff fda6 	bl	8000302 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007c0:	4619      	mov	r1, r3
 80007c2:	482d      	ldr	r0, [pc, #180]	; (8000878 <MX_TIM1_Init+0x13c>)
 80007c4:	f001 fb94 	bl	8001ef0 <HAL_TIM_ConfigClockSource>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007ce:	f7ff fd98 	bl	8000302 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007d2:	4829      	ldr	r0, [pc, #164]	; (8000878 <MX_TIM1_Init+0x13c>)
 80007d4:	f001 f8cb 	bl	800196e <HAL_TIM_PWM_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007de:	f7ff fd90 	bl	8000302 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ee:	4619      	mov	r1, r3
 80007f0:	4821      	ldr	r0, [pc, #132]	; (8000878 <MX_TIM1_Init+0x13c>)
 80007f2:	f001 fefd 	bl	80025f0 <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007fc:	f7ff fd81 	bl	8000302 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 369;
 8000804:	f240 1371 	movw	r3, #369	; 0x171
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800080e:	2300      	movs	r3, #0
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	2200      	movs	r2, #0
 8000824:	4619      	mov	r1, r3
 8000826:	4814      	ldr	r0, [pc, #80]	; (8000878 <MX_TIM1_Init+0x13c>)
 8000828:	f001 faa4 	bl	8001d74 <HAL_TIM_PWM_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000832:	f7ff fd66 	bl	8000302 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <MX_TIM1_Init+0x13c>)
 800085a:	f001 ff27 	bl	80026ac <HAL_TIMEx_ConfigBreakDeadTime>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000864:	f7ff fd4d 	bl	8000302 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <MX_TIM1_Init+0x13c>)
 800086a:	f000 f8b7 	bl	80009dc <HAL_TIM_MspPostInit>

}
 800086e:	bf00      	nop
 8000870:	3758      	adds	r7, #88	; 0x58
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000006c 	.word	0x2000006c
 800087c:	40012c00 	.word	0x40012c00

08000880 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]
 80008ae:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80008b0:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_TIM2_Init+0xe8>)
 80008b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80008b8:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <MX_TIM2_Init+0xe8>)
 80008ba:	2209      	movs	r2, #9
 80008bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_TIM2_Init+0xe8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 80008c4:	4b28      	ldr	r3, [pc, #160]	; (8000968 <MX_TIM2_Init+0xe8>)
 80008c6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80008ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_TIM2_Init+0xe8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008d2:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_TIM2_Init+0xe8>)
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d8:	4823      	ldr	r0, [pc, #140]	; (8000968 <MX_TIM2_Init+0xe8>)
 80008da:	f000 fff9 	bl	80018d0 <HAL_TIM_Base_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008e4:	f7ff fd0d 	bl	8000302 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f2:	4619      	mov	r1, r3
 80008f4:	481c      	ldr	r0, [pc, #112]	; (8000968 <MX_TIM2_Init+0xe8>)
 80008f6:	f001 fafb 	bl	8001ef0 <HAL_TIM_ConfigClockSource>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000900:	f7ff fcff 	bl	8000302 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000904:	4818      	ldr	r0, [pc, #96]	; (8000968 <MX_TIM2_Init+0xe8>)
 8000906:	f001 f832 	bl	800196e <HAL_TIM_PWM_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000910:	f7ff fcf7 	bl	8000302 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	4619      	mov	r1, r3
 8000922:	4811      	ldr	r0, [pc, #68]	; (8000968 <MX_TIM2_Init+0xe8>)
 8000924:	f001 fe64 	bl	80025f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800092e:	f7ff fce8 	bl	8000302 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000932:	2360      	movs	r3, #96	; 0x60
 8000934:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3599;
 8000936:	f640 630f 	movw	r3, #3599	; 0xe0f
 800093a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	4619      	mov	r1, r3
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_TIM2_Init+0xe8>)
 800094c:	f001 fa12 	bl	8001d74 <HAL_TIM_PWM_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000956:	f7ff fcd4 	bl	8000302 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800095a:	4803      	ldr	r0, [pc, #12]	; (8000968 <MX_TIM2_Init+0xe8>)
 800095c:	f000 f83e 	bl	80009dc <HAL_TIM_MspPostInit>

}
 8000960:	bf00      	nop
 8000962:	3738      	adds	r7, #56	; 0x38
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000b4 	.word	0x200000b4

0800096c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <HAL_TIM_Base_MspInit+0x68>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d114      	bne.n	80009a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <HAL_TIM_Base_MspInit+0x6c>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <HAL_TIM_Base_MspInit+0x6c>)
 8000984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <HAL_TIM_Base_MspInit+0x6c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2019      	movs	r0, #25
 800099c:	f000 fa05 	bl	8000daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009a0:	2019      	movs	r0, #25
 80009a2:	f000 fa1e 	bl	8000de2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80009a6:	e010      	b.n	80009ca <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b0:	d10b      	bne.n	80009ca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_TIM_Base_MspInit+0x6c>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_TIM_Base_MspInit+0x6c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_TIM_Base_MspInit+0x6c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40012c00 	.word	0x40012c00
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <HAL_TIM_MspPostInit+0xbc>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d119      	bne.n	8000a30 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <HAL_TIM_MspPostInit+0xc0>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a26      	ldr	r2, [pc, #152]	; (8000a9c <HAL_TIM_MspPostInit+0xc0>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <HAL_TIM_MspPostInit+0xc0>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <HAL_TIM_MspPostInit+0xc4>)
 8000a2a:	f000 f9f5 	bl	8000e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a2e:	e02f      	b.n	8000a90 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a38:	d12a      	bne.n	8000a90 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_TIM_MspPostInit+0xc0>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_TIM_MspPostInit+0xc0>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_TIM_MspPostInit+0xc0>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <HAL_TIM_MspPostInit+0xc4>)
 8000a68:	f000 f9d6 	bl	8000e18 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_TIM_MspPostInit+0xc8>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
 8000a8a:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <HAL_TIM_MspPostInit+0xc8>)
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	6053      	str	r3, [r2, #4]
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40012c00 	.word	0x40012c00
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010800 	.word	0x40010800
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000aa8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000aaa:	e003      	b.n	8000ab4 <LoopCopyDataInit>

08000aac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000aae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ab0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ab2:	3104      	adds	r1, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ab4:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ab8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000aba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000abc:	d3f6      	bcc.n	8000aac <CopyDataInit>
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ac0:	e002      	b.n	8000ac8 <LoopFillZerobss>

08000ac2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ac4:	f842 3b04 	str.w	r3, [r2], #4

08000ac8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000aca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000acc:	d3f9      	bcc.n	8000ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ace:	f7ff fe2f 	bl	8000730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f001 fe4f 	bl	8002774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad6:	f7ff fb9f 	bl	8000218 <main>
  bx lr
 8000ada:	4770      	bx	lr
  ldr r3, =_sidata
 8000adc:	08002810 	.word	0x08002810
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ae4:	2000002c 	.word	0x2000002c
  ldr r2, =_sbss
 8000ae8:	2000002c 	.word	0x2000002c
  ldr r3, = _ebss
 8000aec:	20000100 	.word	0x20000100

08000af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_2_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x28>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x28>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f945 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fdaa 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f95d 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 f925 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000020 	.word	0x20000020
 8000b78:	20000028 	.word	0x20000028
 8000b7c:	20000024 	.word	0x20000024

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	20000028 	.word	0x20000028
 8000ba0:	200000fc 	.word	0x200000fc

08000ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	200000fc 	.word	0x200000fc

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fff0 	bl	8000ba4 <HAL_GetTick>
 8000bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_Delay+0x40>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bde:	bf00      	nop
 8000be0:	f7ff ffe0 	bl	8000ba4 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000028 	.word	0x20000028

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4906      	ldr	r1, [pc, #24]	; (8000c94 <__NVIC_EnableIRQ+0x34>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff90 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff2d 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff42 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff90 	bl	8000cec <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5f 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff35 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffa2 	bl	8000d50 <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b08b      	sub	sp, #44	; 0x2c
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e127      	b.n	800107c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	f040 8116 	bne.w	8001076 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b12      	cmp	r3, #18
 8000e50:	d034      	beq.n	8000ebc <HAL_GPIO_Init+0xa4>
 8000e52:	2b12      	cmp	r3, #18
 8000e54:	d80d      	bhi.n	8000e72 <HAL_GPIO_Init+0x5a>
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d02b      	beq.n	8000eb2 <HAL_GPIO_Init+0x9a>
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d804      	bhi.n	8000e68 <HAL_GPIO_Init+0x50>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d031      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d01c      	beq.n	8000ea0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e66:	e048      	b.n	8000efa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d043      	beq.n	8000ef4 <HAL_GPIO_Init+0xdc>
 8000e6c:	2b11      	cmp	r3, #17
 8000e6e:	d01b      	beq.n	8000ea8 <HAL_GPIO_Init+0x90>
          break;
 8000e70:	e043      	b.n	8000efa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e72:	4a89      	ldr	r2, [pc, #548]	; (8001098 <HAL_GPIO_Init+0x280>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d026      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e78:	4a87      	ldr	r2, [pc, #540]	; (8001098 <HAL_GPIO_Init+0x280>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d806      	bhi.n	8000e8c <HAL_GPIO_Init+0x74>
 8000e7e:	4a87      	ldr	r2, [pc, #540]	; (800109c <HAL_GPIO_Init+0x284>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d020      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e84:	4a86      	ldr	r2, [pc, #536]	; (80010a0 <HAL_GPIO_Init+0x288>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d01d      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
          break;
 8000e8a:	e036      	b.n	8000efa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e8c:	4a85      	ldr	r2, [pc, #532]	; (80010a4 <HAL_GPIO_Init+0x28c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d019      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e92:	4a85      	ldr	r2, [pc, #532]	; (80010a8 <HAL_GPIO_Init+0x290>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d016      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
 8000e98:	4a84      	ldr	r2, [pc, #528]	; (80010ac <HAL_GPIO_Init+0x294>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0xae>
          break;
 8000e9e:	e02c      	b.n	8000efa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	623b      	str	r3, [r7, #32]
          break;
 8000ea6:	e028      	b.n	8000efa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	3304      	adds	r3, #4
 8000eae:	623b      	str	r3, [r7, #32]
          break;
 8000eb0:	e023      	b.n	8000efa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	3308      	adds	r3, #8
 8000eb8:	623b      	str	r3, [r7, #32]
          break;
 8000eba:	e01e      	b.n	8000efa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	330c      	adds	r3, #12
 8000ec2:	623b      	str	r3, [r7, #32]
          break;
 8000ec4:	e019      	b.n	8000efa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	623b      	str	r3, [r7, #32]
          break;
 8000ed2:	e012      	b.n	8000efa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d105      	bne.n	8000ee8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000edc:	2308      	movs	r3, #8
 8000ede:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	611a      	str	r2, [r3, #16]
          break;
 8000ee6:	e008      	b.n	8000efa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	615a      	str	r2, [r3, #20]
          break;
 8000ef2:	e002      	b.n	8000efa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2bff      	cmp	r3, #255	; 0xff
 8000efe:	d801      	bhi.n	8000f04 <HAL_GPIO_Init+0xec>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	e001      	b.n	8000f08 <HAL_GPIO_Init+0xf0>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3304      	adds	r3, #4
 8000f08:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	2bff      	cmp	r3, #255	; 0xff
 8000f0e:	d802      	bhi.n	8000f16 <HAL_GPIO_Init+0xfe>
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x104>
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	3b08      	subs	r3, #8
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	210f      	movs	r1, #15
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	6a39      	ldr	r1, [r7, #32]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	431a      	orrs	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 8096 	beq.w	8001076 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4a:	4b59      	ldr	r3, [pc, #356]	; (80010b0 <HAL_GPIO_Init+0x298>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4a58      	ldr	r2, [pc, #352]	; (80010b0 <HAL_GPIO_Init+0x298>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	4b56      	ldr	r3, [pc, #344]	; (80010b0 <HAL_GPIO_Init+0x298>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f62:	4a54      	ldr	r2, [pc, #336]	; (80010b4 <HAL_GPIO_Init+0x29c>)
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_GPIO_Init+0x2a0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x19e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <HAL_GPIO_Init+0x2a4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x19a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a49      	ldr	r2, [pc, #292]	; (80010c0 <HAL_GPIO_Init+0x2a8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x196>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a48      	ldr	r2, [pc, #288]	; (80010c4 <HAL_GPIO_Init+0x2ac>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x192>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x1a0>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x1a0>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x1a0>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x1a0>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fc8:	493a      	ldr	r1, [pc, #232]	; (80010b4 <HAL_GPIO_Init+0x29c>)
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fe2:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4938      	ldr	r1, [pc, #224]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]
 8000fee:	e006      	b.n	8000ffe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ff0:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	4933      	ldr	r1, [pc, #204]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d006      	beq.n	8001018 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	492e      	ldr	r1, [pc, #184]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	604b      	str	r3, [r1, #4]
 8001016:	e006      	b.n	8001026 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	43db      	mvns	r3, r3
 8001020:	4929      	ldr	r1, [pc, #164]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001022:	4013      	ands	r3, r2
 8001024:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	4924      	ldr	r1, [pc, #144]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	608b      	str	r3, [r1, #8]
 800103e:	e006      	b.n	800104e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	43db      	mvns	r3, r3
 8001048:	491f      	ldr	r1, [pc, #124]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 800104a:	4013      	ands	r3, r2
 800104c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	491a      	ldr	r1, [pc, #104]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	60cb      	str	r3, [r1, #12]
 8001066:	e006      	b.n	8001076 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	43db      	mvns	r3, r3
 8001070:	4915      	ldr	r1, [pc, #84]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8001072:	4013      	ands	r3, r2
 8001074:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	3301      	adds	r3, #1
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	fa22 f303 	lsr.w	r3, r2, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	f47f aed0 	bne.w	8000e2c <HAL_GPIO_Init+0x14>
  }
}
 800108c:	bf00      	nop
 800108e:	372c      	adds	r7, #44	; 0x2c
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	10210000 	.word	0x10210000
 800109c:	10110000 	.word	0x10110000
 80010a0:	10120000 	.word	0x10120000
 80010a4:	10310000 	.word	0x10310000
 80010a8:	10320000 	.word	0x10320000
 80010ac:	10220000 	.word	0x10220000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40010c00 	.word	0x40010c00
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40011400 	.word	0x40011400
 80010c8:	40010400 	.word	0x40010400

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	611a      	str	r2, [r3, #16]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e26c      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8087 	beq.w	800122a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800111c:	4b92      	ldr	r3, [pc, #584]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b04      	cmp	r3, #4
 8001126:	d00c      	beq.n	8001142 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001128:	4b8f      	ldr	r3, [pc, #572]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 030c 	and.w	r3, r3, #12
 8001130:	2b08      	cmp	r3, #8
 8001132:	d112      	bne.n	800115a <HAL_RCC_OscConfig+0x5e>
 8001134:	4b8c      	ldr	r3, [pc, #560]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001140:	d10b      	bne.n	800115a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001142:	4b89      	ldr	r3, [pc, #548]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d06c      	beq.n	8001228 <HAL_RCC_OscConfig+0x12c>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d168      	bne.n	8001228 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e246      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001162:	d106      	bne.n	8001172 <HAL_RCC_OscConfig+0x76>
 8001164:	4b80      	ldr	r3, [pc, #512]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a7f      	ldr	r2, [pc, #508]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800116a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	e02e      	b.n	80011d0 <HAL_RCC_OscConfig+0xd4>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x98>
 800117a:	4b7b      	ldr	r3, [pc, #492]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a7a      	ldr	r2, [pc, #488]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b78      	ldr	r3, [pc, #480]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a77      	ldr	r2, [pc, #476]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800118c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e01d      	b.n	80011d0 <HAL_RCC_OscConfig+0xd4>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800119c:	d10c      	bne.n	80011b8 <HAL_RCC_OscConfig+0xbc>
 800119e:	4b72      	ldr	r3, [pc, #456]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a71      	ldr	r2, [pc, #452]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b6f      	ldr	r3, [pc, #444]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a6e      	ldr	r2, [pc, #440]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e00b      	b.n	80011d0 <HAL_RCC_OscConfig+0xd4>
 80011b8:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a6a      	ldr	r2, [pc, #424]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b68      	ldr	r3, [pc, #416]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a67      	ldr	r2, [pc, #412]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d013      	beq.n	8001200 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fce4 	bl	8000ba4 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fce0 	bl	8000ba4 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e1fa      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0xe4>
 80011fe:	e014      	b.n	800122a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fcd0 	bl	8000ba4 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fccc 	bl	8000ba4 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e1e6      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	4b53      	ldr	r3, [pc, #332]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0x10c>
 8001226:	e000      	b.n	800122a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d063      	beq.n	80012fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001236:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001242:	4b49      	ldr	r3, [pc, #292]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b08      	cmp	r3, #8
 800124c:	d11c      	bne.n	8001288 <HAL_RCC_OscConfig+0x18c>
 800124e:	4b46      	ldr	r3, [pc, #280]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d116      	bne.n	8001288 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_RCC_OscConfig+0x176>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d001      	beq.n	8001272 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e1ba      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001272:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4939      	ldr	r1, [pc, #228]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	e03a      	b.n	80012fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001290:	4b36      	ldr	r3, [pc, #216]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fc85 	bl	8000ba4 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fc81 	bl	8000ba4 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e19b      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4927      	ldr	r1, [pc, #156]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
 80012d0:	e015      	b.n	80012fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fc64 	bl	8000ba4 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e0:	f7ff fc60 	bl	8000ba4 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e17a      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d03a      	beq.n	8001380 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d019      	beq.n	8001346 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_RCC_OscConfig+0x274>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001318:	f7ff fc44 	bl	8000ba4 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fc40 	bl	8000ba4 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e15a      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800133e:	2001      	movs	r0, #1
 8001340:	f000 faa8 	bl	8001894 <RCC_Delay>
 8001344:	e01c      	b.n	8001380 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_RCC_OscConfig+0x274>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134c:	f7ff fc2a 	bl	8000ba4 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001352:	e00f      	b.n	8001374 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001354:	f7ff fc26 	bl	8000ba4 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d908      	bls.n	8001374 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e140      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000
 800136c:	42420000 	.word	0x42420000
 8001370:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001374:	4b9e      	ldr	r3, [pc, #632]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1e9      	bne.n	8001354 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80a6 	beq.w	80014da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001392:	4b97      	ldr	r3, [pc, #604]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10d      	bne.n	80013ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b94      	ldr	r3, [pc, #592]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a93      	ldr	r2, [pc, #588]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b91      	ldr	r3, [pc, #580]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b6:	2301      	movs	r3, #1
 80013b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ba:	4b8e      	ldr	r3, [pc, #568]	; (80015f4 <HAL_RCC_OscConfig+0x4f8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c6:	4b8b      	ldr	r3, [pc, #556]	; (80015f4 <HAL_RCC_OscConfig+0x4f8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a8a      	ldr	r2, [pc, #552]	; (80015f4 <HAL_RCC_OscConfig+0x4f8>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fbe7 	bl	8000ba4 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013da:	f7ff fbe3 	bl	8000ba4 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b64      	cmp	r3, #100	; 0x64
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e0fd      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	4b81      	ldr	r3, [pc, #516]	; (80015f4 <HAL_RCC_OscConfig+0x4f8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x312>
 8001400:	4b7b      	ldr	r3, [pc, #492]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4a7a      	ldr	r2, [pc, #488]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6213      	str	r3, [r2, #32]
 800140c:	e02d      	b.n	800146a <HAL_RCC_OscConfig+0x36e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x334>
 8001416:	4b76      	ldr	r3, [pc, #472]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	4a75      	ldr	r2, [pc, #468]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	6213      	str	r3, [r2, #32]
 8001422:	4b73      	ldr	r3, [pc, #460]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4a72      	ldr	r2, [pc, #456]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001428:	f023 0304 	bic.w	r3, r3, #4
 800142c:	6213      	str	r3, [r2, #32]
 800142e:	e01c      	b.n	800146a <HAL_RCC_OscConfig+0x36e>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b05      	cmp	r3, #5
 8001436:	d10c      	bne.n	8001452 <HAL_RCC_OscConfig+0x356>
 8001438:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4a6c      	ldr	r2, [pc, #432]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6213      	str	r3, [r2, #32]
 8001444:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4a69      	ldr	r2, [pc, #420]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6213      	str	r3, [r2, #32]
 8001450:	e00b      	b.n	800146a <HAL_RCC_OscConfig+0x36e>
 8001452:	4b67      	ldr	r3, [pc, #412]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a66      	ldr	r2, [pc, #408]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	4b64      	ldr	r3, [pc, #400]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4a63      	ldr	r2, [pc, #396]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d015      	beq.n	800149e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fb97 	bl	8000ba4 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fb93 	bl	8000ba4 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e0ab      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	4b57      	ldr	r3, [pc, #348]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ee      	beq.n	800147a <HAL_RCC_OscConfig+0x37e>
 800149c:	e014      	b.n	80014c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fb81 	bl	8000ba4 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fb7d 	bl	8000ba4 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e095      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ee      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d105      	bne.n	80014da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ce:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a47      	ldr	r2, [pc, #284]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8081 	beq.w	80015e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e4:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d061      	beq.n	80015b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d146      	bne.n	8001586 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f8:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <HAL_RCC_OscConfig+0x4fc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb51 	bl	8000ba4 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb4d 	bl	8000ba4 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e067      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001518:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d108      	bne.n	8001540 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	492d      	ldr	r1, [pc, #180]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a19      	ldr	r1, [r3, #32]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	430b      	orrs	r3, r1
 8001552:	4927      	ldr	r1, [pc, #156]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_RCC_OscConfig+0x4fc>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fb21 	bl	8000ba4 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fb1d 	bl	8000ba4 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e037      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x46a>
 8001584:	e02f      	b.n	80015e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <HAL_RCC_OscConfig+0x4fc>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb0a 	bl	8000ba4 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fb06 	bl	8000ba4 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e020      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x498>
 80015b2:	e018      	b.n	80015e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e013      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_OscConfig+0x4f4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015de:	429a      	cmp	r2, r3
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40007000 	.word	0x40007000
 80015f8:	42420060 	.word	0x42420060

080015fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0d0      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001610:	4b6a      	ldr	r3, [pc, #424]	; (80017bc <HAL_RCC_ClockConfig+0x1c0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d910      	bls.n	8001640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b67      	ldr	r3, [pc, #412]	; (80017bc <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 0207 	bic.w	r2, r3, #7
 8001626:	4965      	ldr	r1, [pc, #404]	; (80017bc <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b63      	ldr	r3, [pc, #396]	; (80017bc <HAL_RCC_ClockConfig+0x1c0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0b8      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001658:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001662:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001670:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800167a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	494d      	ldr	r1, [pc, #308]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d040      	beq.n	800171c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d115      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e07f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e073      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e06b      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016da:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f023 0203 	bic.w	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4936      	ldr	r1, [pc, #216]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ec:	f7ff fa5a 	bl	8000ba4 <HAL_GetTick>
 80016f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	e00a      	b.n	800170a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f4:	f7ff fa56 	bl	8000ba4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e053      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 020c 	and.w	r2, r3, #12
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	429a      	cmp	r2, r3
 800171a:	d1eb      	bne.n	80016f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_RCC_ClockConfig+0x1c0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d210      	bcs.n	800174c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 0207 	bic.w	r2, r3, #7
 8001732:	4922      	ldr	r1, [pc, #136]	; (80017bc <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e032      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4916      	ldr	r1, [pc, #88]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	490e      	ldr	r1, [pc, #56]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800178a:	f000 f821 	bl	80017d0 <HAL_RCC_GetSysClockFreq>
 800178e:	4601      	mov	r1, r0
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_RCC_ClockConfig+0x1c8>)
 800179c:	5cd3      	ldrb	r3, [r2, r3]
 800179e:	fa21 f303 	lsr.w	r3, r1, r3
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <HAL_RCC_ClockConfig+0x1cc>)
 80017a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x1d0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f9b8 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40022000 	.word	0x40022000
 80017c0:	40021000 	.word	0x40021000
 80017c4:	080027f8 	.word	0x080027f8
 80017c8:	20000020 	.word	0x20000020
 80017cc:	20000024 	.word	0x20000024

080017d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d0:	b490      	push	{r4, r7}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017d6:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017d8:	1d3c      	adds	r4, r7, #4
 80017da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b04      	cmp	r3, #4
 8001808:	d002      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x40>
 800180a:	2b08      	cmp	r3, #8
 800180c:	d003      	beq.n	8001816 <HAL_RCC_GetSysClockFreq+0x46>
 800180e:	e02d      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001812:	623b      	str	r3, [r7, #32]
      break;
 8001814:	e02d      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	0c9b      	lsrs	r3, r3, #18
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001822:	4413      	add	r3, r2
 8001824:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001828:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d013      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	0c5b      	lsrs	r3, r3, #17
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001842:	4413      	add	r3, r2
 8001844:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001848:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	4a0f      	ldr	r2, [pc, #60]	; (800188c <HAL_RCC_GetSysClockFreq+0xbc>)
 800184e:	fb02 f203 	mul.w	r2, r2, r3
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	e004      	b.n	8001866 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001860:	fb02 f303 	mul.w	r3, r2, r3
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	623b      	str	r3, [r7, #32]
      break;
 800186a:	e002      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <HAL_RCC_GetSysClockFreq+0xbc>)
 800186e:	623b      	str	r3, [r7, #32]
      break;
 8001870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001872:	6a3b      	ldr	r3, [r7, #32]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bc90      	pop	{r4, r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	080027e4 	.word	0x080027e4
 8001884:	080027f4 	.word	0x080027f4
 8001888:	40021000 	.word	0x40021000
 800188c:	007a1200 	.word	0x007a1200
 8001890:	003d0900 	.word	0x003d0900

08001894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <RCC_Delay+0x34>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <RCC_Delay+0x38>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0a5b      	lsrs	r3, r3, #9
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018b0:	bf00      	nop
  }
  while (Delay --);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	60fa      	str	r2, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <RCC_Delay+0x1c>
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000020 	.word	0x20000020
 80018cc:	10624dd3 	.word	0x10624dd3

080018d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e041      	b.n	8001966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff f838 	bl	800096c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	4619      	mov	r1, r3
 800190e:	4610      	mov	r0, r2
 8001910:	f000 fbca 	bl	80020a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e041      	b.n	8001a04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d106      	bne.n	800199a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f839 	bl	8001a0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2202      	movs	r2, #2
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3304      	adds	r3, #4
 80019aa:	4619      	mov	r1, r3
 80019ac:	4610      	mov	r0, r2
 80019ae:	f000 fb7b 	bl	80020a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_TIM_PWM_Start+0x24>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e022      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d109      	bne.n	8001a5e <HAL_TIM_PWM_Start+0x3e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	e015      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d109      	bne.n	8001a78 <HAL_TIM_PWM_Start+0x58>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	e008      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e05e      	b.n	8001b50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d104      	bne.n	8001aa2 <HAL_TIM_PWM_Start+0x82>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aa0:	e013      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d104      	bne.n	8001ab2 <HAL_TIM_PWM_Start+0x92>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ab0:	e00b      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d104      	bne.n	8001ac2 <HAL_TIM_PWM_Start+0xa2>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ac0:	e003      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fd68 	bl	80025a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_TIM_PWM_Start+0x138>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d107      	bne.n	8001af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <HAL_TIM_PWM_Start+0x138>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d00e      	beq.n	8001b1a <HAL_TIM_PWM_Start+0xfa>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b04:	d009      	beq.n	8001b1a <HAL_TIM_PWM_Start+0xfa>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_TIM_PWM_Start+0x13c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d004      	beq.n	8001b1a <HAL_TIM_PWM_Start+0xfa>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <HAL_TIM_PWM_Start+0x140>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d111      	bne.n	8001b3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b06      	cmp	r3, #6
 8001b2a:	d010      	beq.n	8001b4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3c:	e007      	b.n	8001b4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0201 	orr.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40012c00 	.word	0x40012c00
 8001b5c:	40000400 	.word	0x40000400
 8001b60:	40000800 	.word	0x40000800

08001b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d122      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d11b      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0202 	mvn.w	r2, #2
 8001b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fa62 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fa55 	bl	800205e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fa64 	bl	8002082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d122      	bne.n	8001c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d11b      	bne.n	8001c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0204 	mvn.w	r2, #4
 8001be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2202      	movs	r2, #2
 8001bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fa38 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001c00:	e005      	b.n	8001c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fa2b 	bl	800205e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 fa3a 	bl	8002082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d122      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d11b      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0208 	mvn.w	r2, #8
 8001c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fa0e 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001c54:	e005      	b.n	8001c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fa01 	bl	800205e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fa10 	bl	8002082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d122      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d11b      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0210 	mvn.w	r2, #16
 8001c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2208      	movs	r2, #8
 8001c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f9e4 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8001ca8:	e005      	b.n	8001cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f9d7 	bl	800205e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f9e6 	bl	8002082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d107      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0201 	mvn.w	r2, #1
 8001ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7fe fcb4 	bl	8000650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	2b80      	cmp	r3, #128	; 0x80
 8001cf4:	d10e      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	2b80      	cmp	r3, #128	; 0x80
 8001d02:	d107      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fd26 	bl	8002760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1e:	2b40      	cmp	r3, #64	; 0x40
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	2b40      	cmp	r3, #64	; 0x40
 8001d2e:	d107      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f9aa 	bl	8002094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d10e      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d107      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0220 	mvn.w	r2, #32
 8001d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fcf1 	bl	800274e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e0ac      	b.n	8001ee8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	f200 809f 	bhi.w	8001edc <HAL_TIM_PWM_ConfigChannel+0x168>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001dd9 	.word	0x08001dd9
 8001da8:	08001edd 	.word	0x08001edd
 8001dac:	08001edd 	.word	0x08001edd
 8001db0:	08001edd 	.word	0x08001edd
 8001db4:	08001e19 	.word	0x08001e19
 8001db8:	08001edd 	.word	0x08001edd
 8001dbc:	08001edd 	.word	0x08001edd
 8001dc0:	08001edd 	.word	0x08001edd
 8001dc4:	08001e5b 	.word	0x08001e5b
 8001dc8:	08001edd 	.word	0x08001edd
 8001dcc:	08001edd 	.word	0x08001edd
 8001dd0:	08001edd 	.word	0x08001edd
 8001dd4:	08001e9b 	.word	0x08001e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f9c4 	bl	800216c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0208 	orr.w	r2, r2, #8
 8001df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699a      	ldr	r2, [r3, #24]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0204 	bic.w	r2, r2, #4
 8001e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6999      	ldr	r1, [r3, #24]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	619a      	str	r2, [r3, #24]
      break;
 8001e16:	e062      	b.n	8001ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fa0a 	bl	8002238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6999      	ldr	r1, [r3, #24]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	021a      	lsls	r2, r3, #8
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	619a      	str	r2, [r3, #24]
      break;
 8001e58:	e041      	b.n	8001ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fa53 	bl	800230c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0208 	orr.w	r2, r2, #8
 8001e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0204 	bic.w	r2, r2, #4
 8001e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69d9      	ldr	r1, [r3, #28]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	61da      	str	r2, [r3, #28]
      break;
 8001e98:	e021      	b.n	8001ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fa9d 	bl	80023e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69da      	ldr	r2, [r3, #28]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69da      	ldr	r2, [r3, #28]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69d9      	ldr	r1, [r3, #28]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	021a      	lsls	r2, r3, #8
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	61da      	str	r2, [r3, #28]
      break;
 8001eda:	e000      	b.n	8001ede <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_TIM_ConfigClockSource+0x18>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e0a6      	b.n	8002056 <HAL_TIM_ConfigClockSource+0x166>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b40      	cmp	r3, #64	; 0x40
 8001f3e:	d067      	beq.n	8002010 <HAL_TIM_ConfigClockSource+0x120>
 8001f40:	2b40      	cmp	r3, #64	; 0x40
 8001f42:	d80b      	bhi.n	8001f5c <HAL_TIM_ConfigClockSource+0x6c>
 8001f44:	2b10      	cmp	r3, #16
 8001f46:	d073      	beq.n	8002030 <HAL_TIM_ConfigClockSource+0x140>
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	d802      	bhi.n	8001f52 <HAL_TIM_ConfigClockSource+0x62>
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d06f      	beq.n	8002030 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f50:	e078      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	d06c      	beq.n	8002030 <HAL_TIM_ConfigClockSource+0x140>
 8001f56:	2b30      	cmp	r3, #48	; 0x30
 8001f58:	d06a      	beq.n	8002030 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f5a:	e073      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f5c:	2b70      	cmp	r3, #112	; 0x70
 8001f5e:	d00d      	beq.n	8001f7c <HAL_TIM_ConfigClockSource+0x8c>
 8001f60:	2b70      	cmp	r3, #112	; 0x70
 8001f62:	d804      	bhi.n	8001f6e <HAL_TIM_ConfigClockSource+0x7e>
 8001f64:	2b50      	cmp	r3, #80	; 0x50
 8001f66:	d033      	beq.n	8001fd0 <HAL_TIM_ConfigClockSource+0xe0>
 8001f68:	2b60      	cmp	r3, #96	; 0x60
 8001f6a:	d041      	beq.n	8001ff0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f6c:	e06a      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f72:	d066      	beq.n	8002042 <HAL_TIM_ConfigClockSource+0x152>
 8001f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f78:	d017      	beq.n	8001faa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f7a:	e063      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6899      	ldr	r1, [r3, #8]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f000 faed 	bl	800256a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	609a      	str	r2, [r3, #8]
      break;
 8001fa8:	e04c      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6899      	ldr	r1, [r3, #8]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f000 fad6 	bl	800256a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fcc:	609a      	str	r2, [r3, #8]
      break;
 8001fce:	e039      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f000 fa4d 	bl	800247c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2150      	movs	r1, #80	; 0x50
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 faa4 	bl	8002536 <TIM_ITRx_SetConfig>
      break;
 8001fee:	e029      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f000 fa6b 	bl	80024d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2160      	movs	r1, #96	; 0x60
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fa94 	bl	8002536 <TIM_ITRx_SetConfig>
      break;
 800200e:	e019      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	461a      	mov	r2, r3
 800201e:	f000 fa2d 	bl	800247c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2140      	movs	r1, #64	; 0x40
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fa84 	bl	8002536 <TIM_ITRx_SetConfig>
      break;
 800202e:	e009      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	4610      	mov	r0, r2
 800203c:	f000 fa7b 	bl	8002536 <TIM_ITRx_SetConfig>
        break;
 8002040:	e000      	b.n	8002044 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
	...

080020a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a29      	ldr	r2, [pc, #164]	; (8002160 <TIM_Base_SetConfig+0xb8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00b      	beq.n	80020d8 <TIM_Base_SetConfig+0x30>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c6:	d007      	beq.n	80020d8 <TIM_Base_SetConfig+0x30>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a26      	ldr	r2, [pc, #152]	; (8002164 <TIM_Base_SetConfig+0xbc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d003      	beq.n	80020d8 <TIM_Base_SetConfig+0x30>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a25      	ldr	r2, [pc, #148]	; (8002168 <TIM_Base_SetConfig+0xc0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d108      	bne.n	80020ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <TIM_Base_SetConfig+0xb8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00b      	beq.n	800210a <TIM_Base_SetConfig+0x62>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f8:	d007      	beq.n	800210a <TIM_Base_SetConfig+0x62>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <TIM_Base_SetConfig+0xbc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d003      	beq.n	800210a <TIM_Base_SetConfig+0x62>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a18      	ldr	r2, [pc, #96]	; (8002168 <TIM_Base_SetConfig+0xc0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d108      	bne.n	800211c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a07      	ldr	r2, [pc, #28]	; (8002160 <TIM_Base_SetConfig+0xb8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d103      	bne.n	8002150 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	615a      	str	r2, [r3, #20]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40012c00 	.word	0x40012c00
 8002164:	40000400 	.word	0x40000400
 8002168:	40000800 	.word	0x40000800

0800216c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f023 0201 	bic.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0303 	bic.w	r3, r3, #3
 80021a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f023 0302 	bic.w	r3, r3, #2
 80021b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <TIM_OC1_SetConfig+0xc8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d10c      	bne.n	80021e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f023 0308 	bic.w	r3, r3, #8
 80021ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a13      	ldr	r2, [pc, #76]	; (8002234 <TIM_OC1_SetConfig+0xc8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d111      	bne.n	800220e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	621a      	str	r2, [r3, #32]
}
 8002228:	bf00      	nop
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40012c00 	.word	0x40012c00

08002238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	f023 0210 	bic.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f023 0320 	bic.w	r3, r3, #32
 8002282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <TIM_OC2_SetConfig+0xd0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d10d      	bne.n	80022b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800229e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a14      	ldr	r2, [pc, #80]	; (8002308 <TIM_OC2_SetConfig+0xd0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d113      	bne.n	80022e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	621a      	str	r2, [r3, #32]
}
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	40012c00 	.word	0x40012c00

0800230c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0303 	bic.w	r3, r3, #3
 8002342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <TIM_OC3_SetConfig+0xd0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10d      	bne.n	8002386 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <TIM_OC3_SetConfig+0xd0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d113      	bne.n	80023b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800239c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	621a      	str	r2, [r3, #32]
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40012c00 	.word	0x40012c00

080023e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800240e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800242a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	031b      	lsls	r3, r3, #12
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <TIM_OC4_SetConfig+0x98>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d109      	bne.n	8002454 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002446:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	621a      	str	r2, [r3, #32]
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	40012c00 	.word	0x40012c00

0800247c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f023 0201 	bic.w	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f023 030a 	bic.w	r3, r3, #10
 80024b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	621a      	str	r2, [r3, #32]
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f023 0210 	bic.w	r2, r3, #16
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002502:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	031b      	lsls	r3, r3, #12
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002514:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	621a      	str	r2, [r3, #32]
}
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002536:	b480      	push	{r7}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	f043 0307 	orr.w	r3, r3, #7
 8002558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	609a      	str	r2, [r3, #8]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800256a:	b480      	push	{r7}
 800256c:	b087      	sub	sp, #28
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002584:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	021a      	lsls	r2, r3, #8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	431a      	orrs	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4313      	orrs	r3, r2
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	609a      	str	r2, [r3, #8]
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2201      	movs	r2, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a1a      	ldr	r2, [r3, #32]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	401a      	ands	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a1a      	ldr	r2, [r3, #32]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	431a      	orrs	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	621a      	str	r2, [r3, #32]
}
 80025e6:	bf00      	nop
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002604:	2302      	movs	r3, #2
 8002606:	e046      	b.n	8002696 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a16      	ldr	r2, [pc, #88]	; (80026a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00e      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002654:	d009      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d004      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10c      	bne.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	4313      	orrs	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40000400 	.word	0x40000400
 80026a8:	40000800 	.word	0x40000800

080026ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e03d      	b.n	8002744 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
	...

08002774 <__libc_init_array>:
 8002774:	b570      	push	{r4, r5, r6, lr}
 8002776:	2500      	movs	r5, #0
 8002778:	4e0c      	ldr	r6, [pc, #48]	; (80027ac <__libc_init_array+0x38>)
 800277a:	4c0d      	ldr	r4, [pc, #52]	; (80027b0 <__libc_init_array+0x3c>)
 800277c:	1ba4      	subs	r4, r4, r6
 800277e:	10a4      	asrs	r4, r4, #2
 8002780:	42a5      	cmp	r5, r4
 8002782:	d109      	bne.n	8002798 <__libc_init_array+0x24>
 8002784:	f000 f822 	bl	80027cc <_init>
 8002788:	2500      	movs	r5, #0
 800278a:	4e0a      	ldr	r6, [pc, #40]	; (80027b4 <__libc_init_array+0x40>)
 800278c:	4c0a      	ldr	r4, [pc, #40]	; (80027b8 <__libc_init_array+0x44>)
 800278e:	1ba4      	subs	r4, r4, r6
 8002790:	10a4      	asrs	r4, r4, #2
 8002792:	42a5      	cmp	r5, r4
 8002794:	d105      	bne.n	80027a2 <__libc_init_array+0x2e>
 8002796:	bd70      	pop	{r4, r5, r6, pc}
 8002798:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800279c:	4798      	blx	r3
 800279e:	3501      	adds	r5, #1
 80027a0:	e7ee      	b.n	8002780 <__libc_init_array+0xc>
 80027a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027a6:	4798      	blx	r3
 80027a8:	3501      	adds	r5, #1
 80027aa:	e7f2      	b.n	8002792 <__libc_init_array+0x1e>
 80027ac:	08002808 	.word	0x08002808
 80027b0:	08002808 	.word	0x08002808
 80027b4:	08002808 	.word	0x08002808
 80027b8:	0800280c 	.word	0x0800280c

080027bc <memset>:
 80027bc:	4603      	mov	r3, r0
 80027be:	4402      	add	r2, r0
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d100      	bne.n	80027c6 <memset+0xa>
 80027c4:	4770      	bx	lr
 80027c6:	f803 1b01 	strb.w	r1, [r3], #1
 80027ca:	e7f9      	b.n	80027c0 <memset+0x4>

080027cc <_init>:
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ce:	bf00      	nop
 80027d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d2:	bc08      	pop	{r3}
 80027d4:	469e      	mov	lr, r3
 80027d6:	4770      	bx	lr

080027d8 <_fini>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	bf00      	nop
 80027dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027de:	bc08      	pop	{r3}
 80027e0:	469e      	mov	lr, r3
 80027e2:	4770      	bx	lr
